#include <iostream>//подключаем библиотеку  iostream для дальнейшей работы с кодом
class Matrix//создаём класс  Matrix
{//объявляем поля класса которые будут приватные, то есть это приватная часть класса
	int sizeY;
	int sizeX;
	int* data;
	int index2D(int y, int x)//метод который отвечает за
		const {
		return y * sizeX + x;
	}
	int index2D(int y, int x, int sizeXP)//метод который отвечает за
		const {
		return y * sizeXP + x;
	}
public://публичная часть кода
	Matrix(int sizeYP, int sizeXP)//конструктор с параметрами
		: sizeY{ sizeYP }, sizeX{ sizeXP },
		data{ new int[sizeYP * sizeXP] } {}

	int operator()(int y, int x)//перегрузка оператора круглых скобок
		const {
		return *(data + index2D(y, x));
	}

	int& operator()(int y, int x)//перегрузка оператора круглых скобок, для ссылки
	{
		return *(data + index2D(y, x));
	}

	void deleteColumn(int columnPos)//метод изменения столбца
	{
		--sizeX;//убавляем sizeX на единицу
		int* newData{ new int[sizeY * sizeX] };//создаём временную переменную с указателем с размерностью произведения sizex и sizeY 
		for (int y{ 0 }; y < sizeY; ++y)
		{
			for (int x{ 0 }; x < sizeX; ++x)
			{
				*(newData + index2D(y, x)) =
					*(data + index2D(y, x + (x >=
						columnPos)));
			}
		}
		delete[] data;//удаляем дату
		data = newData;// присваиваем дате нью дату
	}
	void addColumn(int columnPos, int* newCol = nullptr)//метод добавления столбца
	{
		int* newData{ new int[sizeY * (sizeX + 1)] };//создаём временную переменную с указателем разморность которой произведение (sizex+1) и SizeY  
		for (int y{ 0 }; y < sizeY; ++y)
		{
			for (int x{ 0 }; x < sizeX; ++x)
			{
				*(newData + index2D(y, x + (x >= columnPos),
					sizeX + 1)) = *(data + index2D(y, x));
			}
			*(newData + index2D(y, columnPos, sizeX + 1)) =
				newCol ? *(newCol + y) : 0;
		}
		delete[] data;//удаляем дату
		data = newData;//присваиваем дате нью дату
		++sizeX;//увеличиваем sizeX на единечку
	}
	void deleteRow(int rowPos)//cоздаём метод изменения ряда
	{
		--sizeY;
		int* newData{ new int[sizeY * sizeX] };
		for (int y{ 0 }; y < sizeY; ++y)
		{
			for (int x{ 0 }; x < sizeX; ++x)
			{
				*(newData + index2D(y, x)) =
					*(data + index2D(y + (y >= rowPos),
						x));
			}
		}
		delete[] data;//удаляем дату
		data = newData;//присваиваем дате ньюдату
	}
	void addRow(int rowPos, int* newRow = nullptr)//создаём метод добавление столбца
	{
		int* newData{ new int[(sizeY + 1) * sizeX] };//создаём временную переменную с указателем разморность которой произведение (sizeY+1) и SizeX		
		for (int y{ 0 }; y < sizeY; ++y)
		{
			for (int x{ 0 }; x < sizeX; ++x)
			{
				*(newData + index2D(y + (y >= rowPos), x)) =
					*(data + index2D(y, x));
			}
		}
		for (int x{ 0 }; x < sizeX; ++x)
		{
			*(newData + index2D(rowPos, x)) =
				newRow ? *(newRow + x) : 0;
		}
		delete[] data;//удаление даты
		data = newData;//присваиваем дате ньюдату
		++sizeY;//увиличиываем sizeY на единичку
	}
	void print()const//создаём метод вывода
	{
		for (int y{ 0 }; y < sizeY; ++y)//цикл в цикле выводящий массив
		{
			for (int x{ 0 }; x < sizeX; ++x)
			{
				std::cout << (*this)(y, x) << '\t';
			}
			std::cout << '\n';
		}
		std::cout << '\n';
	}
	~Matrix() { delete[] data; }//cоздаём деструктор
};
int main()
{
	/* Установите значение USER_INPUT в 1 чтоб разрешить
	пользовательский ввод размеров матрицы */
#define USER_INPUT 0;//прописываем юзер инпут который будет виден только программисту и будет работать при истинном выполнении условия которое находится ниже объявления переменных
	int rows{ 3 };
	int columns{ 3 };
	int counter{ 1 };
#if USER_INPUT == 1//пишим условие которое не истинно и не будет работать
	std::cout << "Enter matrix rows count\n";
	std::cin >> rows;
	std::cout << "Enter matrix columns count\n";
	std::cin >> columns;
#endif
	Matrix matrix{ rows, columns };//создаём переменную с типом данных класса
	for (int y{ 0 }; y < rows; ++y)
	{
		for (int x{ 0 }; x < columns; ++x)
		{
			matrix(y, x) = counter++;
		}
	}
	matrix.print();//вызываем метод принт
	std::cout << std::endl;//пропуск строки

	matrix.deleteColumn(2);//вызываем метод изменения столбца 
	matrix.print();//вызываем метод принт
	std::cout << std::endl;//пропуск строки

	int* newColumn{ new int[columns] {11,22,33} };//создаём массив с элементами для столбца
	matrix.addColumn(0, newColumn);//вызываем метод добавления элементов в столбец
	matrix.print();//вызываем метод принт
	std::cout << std::endl;//пропуск строки

	matrix.deleteRow(2);//вызывааем метод извенения ряда
	matrix.print();//вызываем метод принт
	std::cout << std::endl;//пропуске строки

	int* newRow{ new int[rows] {111,222,333} };//создаём массив с элементами для ряда
	matrix.addRow(2, newRow);//вызываем метод добавления ряда
	matrix.print();//вызываем метод принт
	std::cout << std::endl;//пропуск строки

	delete[] newRow;//удаление newRow[]
	delete[] newColumn;//удаление newColumn[]
}
